#!/bin/sh
# xbalog06 Michal Balogh
# 10.3.2023

export POSIXLY_CORRECT=yes
export LC_ALL=C

# odstranit
#export MOLE_RC="$HOME"/.config/molerc
#EDITOR="nano"
#VISUAL="code"

DATETIME=$($BINL/testdate +%Y-%m-%d_%H-%M-%S)
#DATETIME=$(date +%Y-%m-%d_%H-%M-%S)



#------functions section---------------------------------------------------------------


print_help() {
  echo "Usage: mole -h"
  echo "       mole [-g GROUP] FILE"
  echo "       mole [-m] [FILTERS] [DIRECTORY]"
  echo "       mole list [FILTERS] [DIRECTORY]"
  echo ""
  echo "Description:"
  echo "  -h: Display this help message."
  echo "  FILE: Open the specified file."
  echo "  -g GROUP: Assign the opened file to the specified group."
  echo "  -m: Select the most frequently opened file instead of the last opened one."
  echo "  FILTERS: Apply filters to the list"
  echo "  DIRECTORY: Select the directory to search in. If not specified, current directory will be used."
  echo "  list: List the files that were opened with mole."
}


open_editor() {
  if [ "$EDITOR" ]; then
    "$EDITOR" "$FILE"
  elif [ "$VISUAL" ]; then
    "$VISUAL" "$FILE"
  else
    vi "$FILE"
  fi
}

getdir(){
  if [ -z "$FILE" ]; then
    DIR=$(basename "$(realpath .)")
  else
    DIR=$(basename "$(dirname "$(realpath "$FILE")")")
  fi
}



list(){

  filter_data

  if [ -z "$FILTERED" ]; then
    exit 1
  fi

  FILTERED=$(echo "$FILTERED" | awk -v dir="$DIR" -F ';' '{sub(/\/[^\/]*$/, "", $6); if ($6 == dir) print }')
  
  SORTED=$(echo "$FILTERED" | sort -dfu -k5 -k3)

  SORTED=$(echo "$SORTED" | awk '{ split($0, cols, " "); 
    if (cols[5] == prev_col5) {
      if (prev_col3 == "-"){prev_col3 = cols[3]} 
      else {prev_col3 = prev_col3 "," cols[3]}
    } 
    else {
      if (NR > 1) { print prev_col1, prev_col2, prev_col3, prev_col4, prev_col5 }
      prev_col1 = cols[1]
      prev_col2 = cols[2]
      prev_col3 = cols[3]
      prev_col4 = cols[4]
      prev_col5 = cols[5]
      }
    }
    END { print prev_col1, prev_col2, prev_col3, prev_col4, prev_col5 }')

  LONGESTNAME=$(echo "$FILTERED" | awk -F ' ' '{ if (length($5) > max) max=length($5) } END { print max }')
  LONGESTNAME=$((LONGESTNAME+1))
  echo "$SORTED" | awk -F ' ' '{printf "%-'$LONGESTNAME's %s\n", $5":", $3}'

  exit 0
}


log_mole_rc(){
  getdir
  if [ -z "$GROUP" ];then
    GROUP="-"
  fi
  NAME=$(basename "$FILE")
  echo "$DATETIME;$USER;$GROUP;$DIR;$NAME;$(realpath "$FILE")" >> "$MOLE_RC"
} 



secret_log(){
  filter_data
  if [ -z "$FILTERED" ]; then
    exit 0
  fi
  SL_PATH="/home/$USER/.mole"
  if [ ! -d "$SL_PATH" ]; then
    mkdir "$SL_PATH"
  fi 
  FILENAME="log_""$USER"_"$DATETIME"
 
  echo "$FILTERED" | awk -F ';' '{print $6 ";" $1}' \
  | sort -dfu \
  | awk -F ';' '
      BEGIN {last_file = ""}
      {
        if ($1 != last_file) {
          if (last_file != "") {
            print date
          }
          last_file = $1
          date = $1 ";"
        }
        date = date $2 ";"
      }
      END {if (last_file != "") print date}' \
  | sed 's/;$//' \
  | bzip2 -c > "$SL_PATH"/"$FILENAME".bz2


}


check_date_format() {
  if ! echo "$1" | grep -Eq '^[0-9]{4}-[0-9]{2}-[0-9]{2}$'; then
    echo "Invalid date format"
    echo "The correct format of date is YYYY-MM-DD"
    exit 1
  fi
}


filter_data(){
  
  FILTERED=$(cat "$MOLE_RC")

  if [ "$GROUP" ] && [ -z "$SECRETLOG" ]; then
    FILTERED=$(echo "$FILTERED" | awk -F';' -v groups="$GROUP" '
      BEGIN {split(groups, arr, ",")}
      {for(i in arr) if($3 == arr[i]) {print; break}}')
  fi
  
  if [ "$SECRETLOG" ] && [ "$DIRECTORIES" ]; then

      
    FILTERED=$(echo "$FILTERED" | awk -F';' -v dirs="$DIRECTORIES" '
    BEGIN {split(dirs, arr, " ")}
    {for (i=1; i<=NF; i++) {sub(/\/[^\/]*$/, "", $i)}}
    {for (i in arr) {for (j=1; j<=NF; j++) {if ($j == arr[i]) {print; break}}}}')


  fi
  #echo "$FILTERED"


  if [ "$DATE_AFTER" ]; then
    check_date_format "$DATE_AFTER"
    FILTERED=$(echo "$FILTERED" | awk -F';' -v date="$DATE_AFTER" '{split($1, dt, "_"); if (dt[1] > date) print}')

  fi

  if [ "$DATE_BEFORE" ]; then
    check_date_format "$DATE_BEFORE"
    FILTERED=$(echo "$FILTERED" | awk -F';' -v date="$DATE_BEFORE" '{split($1, dt, "_"); if (dt[1] < date) print}')
  fi

}


open_file() {
  
  if [ -z "$FILE" ]; then
    echo ERROR: Could not find file with the specified criteria
    exit 1
  fi
  
  open_editor $(basename "$FILE")
  if [ $? -ne 0 ]; then
    echo ERROR: Could not open editor
    exit 1
  fi
  log_mole_rc
}


#------code section--------------------------------------------------------------------

if [ -z "$(which realpath)" ]; then
  echo "Error: command realpath not found"
  exit 1
fi


if [ -z "$MOLE_RC" ]; then
  echo "Error: MOLE_RC is not set"
  exit 1
fi

if [ ! -f "$MOLE_RC" ]; then
  mkdir -p "$(dirname "$MOLE_RC")"
  touch "$MOLE_RC"
fi

#DATE=$(date +%Y-%m-%d)
#DATETIME=$($BINL/testdate)
#DATETIME=$(date +%Y-%m-%d_%H-%M-%S)


if [ "$1" = "list" ]; then
  LIST="TRUE"
  shift
fi

if [ "$1" = "secret-log" ]; then
  SECRETLOG="TRUE"
  shift
fi

while getopts ":hg:ma:b:" option; do
  case "$option" in
  h)      print_help; exit 0;;
  g)      GROUP=$OPTARG;;
  m)      MOST_USED="TRUE";;
  a)      DATE_AFTER=$OPTARG;; #YYYY-MM-DD format 
  b)      DATE_BEFORE=$OPTARG;; #YYYY-MM-DD format
  :)      echo "Error: -$OPTARG requires an argument"; exit 1;;
  *)      echo "Invalid option: -$OPTARG" >&2
          echo "Try 'mole -h' for more information."
          exit 1;;
  esac
done

shift $((OPTIND-1))


if [ "$LIST" ]; then
  if [ $# -eq 0 ]; then
    DIR=$(realpath .)
  else 
    DIR=$1
  fi
  list
  exit 0
fi

if [ "$SECRETLOG" ]; then
  while [ $# -ne 0 ]; do
    DIRECTORIES="$DIRECTORIES $1"
    shift
  done 
  secret_log
  exit 0
fi


filter_data

if [ $# -eq 0 ]; then
  current_dir=$(realpath .)  
else
  ARGUMENT=$(realpath $1)
  if [ -d "$ARGUMENT" ]; then
    current_dir=$ARGUMENT
  else 
    # otvori subor specifikovany argumentom, pripadne aj so zadanou skupinou ziskanou z filter_data
    FILE=$ARGUMENT
    open_file
    exit 0
  fi
  shift
fi


# otvori v editore posledny editovany subor v tomto adresari
# regulerny vyraz sub(/\/[^\/]*$/, "", $6) odstrani vsetko po poslednom '/' -> ziska cestu k suboru
# ziskanu cestu porovna s aktualnym adresarom, ak je rovnaky -> otvori subor
FILE=$(echo "$FILTERED" | awk -v current_dir="$current_dir" -F ';' '{rpath=$6; sub(/\/[^\/]*$/, "", $6); if ($6 == current_dir) {last_match=rpath}} END {print last_match}' )

# ak sa nenajde ziadna zhoda, ukonci skript s errorom
if [ -z "$FILE" ]; then
  echo "No files were edited with mole in this directory"
  exit 1
fi

#echo "$FILE"
open_file

exit 0



#!/bin/sh
# xbalog06 Michal Balogh
# 10.3.2023

export POSIXLY_CORRECT=yes
export LC_ALL=C

# odstranit
export MOLE_RC="$HOME"/.config/molerc
EDITOR="nano"
VISUAL="code"



#------functions section---------------------------------------------------------------


# prints help message
print_help() {
  echo "Usage: mole -h"
  echo "       mole [-g GROUP] FILE"
  echo "       mole [-m] [FILTERS] [DIRECTORY]"
  echo "       mole list [FILTERS] [DIRECTORY]"
  echo ""
  echo "Description:"
  echo "  -h: Display this help message."
  echo "  FILE: Open the specified file."
  echo "  -g GROUP: Assign the opened file to the specified group."
  echo "  -m: Select the most frequently opened file instead of the last opened one."
  echo "  FILTERS: Apply filters to the list"
  echo "  DIRECTORY: Select the directory to search in. If not specified, current directory will be used."
  echo "  list: List the files that were opened with mole."
}

# opens file in set editor
open_editor() {
  if [ "$EDITOR" ]; then
    "$EDITOR" "$FILE"
  elif [ "$VISUAL" ]; then
    "$VISUAL" "$FILE"
  else
    vi "$FILE"
  fi
}

getdir(){
  if [ -z "$FILE" ]; then
    DIR=$(basename "$(realpath .)")
  else
    DIR=$(basename "$(dirname "$(realpath "$FILE")")")
  fi
}

log_mole_rc(){
  getdir
  if [ -z "$GROUP" ];then
    GROUP="-"
  fi
  echo "$DATETIME;$USER;$GROUP;$DIR;$FILE" >> "$MOLE_RC"
} 


secret_log(){
  SL_PATH="/home/"$USER"/.mole"
  if [ ! -d "$SL_PATH" ]; then
    mkdir "$SL_PATH"
  fi 
  filter_data
  FILENAME="log_$USER_$DATETIME"
  echo "$FILTERED" | bzip2 -c > "$SL_PATH"/"$FILENAME".bz2

}


check_date_format() {
  if ! echo "$1" | grep -Eq '^[0-9]{4}-[0-9]{2}-[0-9]{2}$'; then
    echo "Invalid date format"
    echo "The correct format of date is YYYY-MM-DD"
    exit 1
  fi
}


filter_data(){

  if [ "$DIR" ]; then
    FILTERED=$(awk -F';' -v dir="$DIR" '$4 == dir {print}' "$MOLE_RC")
  fi

  if [ "$GROUP" ] && [ -z "$SECRETLOG" ]; then
    FILTERED=$(echo "$FILTERED" | awk -F';' -v groups="$GROUP" '
      BEGIN {split(groups, arr, ",")}
      {for(i in arr) if($3 == arr[i]) {print; break}}')
  fi

  if [ "$SECRETLOG" ] && [ "$DIRECTORIES" ]; then
    FILTERED=$(awk -F';' -v dirs="$DIRECTORIES" ' 
      BEGIN {split(dirs, arr, ",")}
      {for(i in arr) if($4 == arr[i]) {print; break}}' "$MOLE_RC")
  fi


  if [ "$DATE_AFTER" ]; then
    check_date_format "$DATE_AFTER"
    FILTERED=$(echo "$FILTERED" | awk -F';' -v date="$DATE_AFTER" '$1 > date {print}')
  fi

  if [ "$DATE_BEFORE" ];then
    check_date_format "$DATE_BEFORE"
    FILTERED=$(echo "$FILTERED" | awk -F';' -v date="$DATE_BEFORE" '$1 < date {print}')  
  fi
 
  if [ -z "$FILTERED" ]; then
    echo "No files edited through mole were found with specified criteria"
    exit 0
  fi
}

list(){
  filter_data
  SORTED=$(echo "$FILTERED" | sort -f -t ';' -k5 -k3)
  LONGESTNAME=$(echo "$FILTERED" | awk -F ';' '{ if (length($5) > max) max=length($5) } END { print max }')
  LONGESTNAME=$((LONGESTNAME+1))
  echo "$SORTED" | awk -F ';' '{printf "%-'$LONGESTNAME's %s\n", $5":", $3}'
}

change_dir() {
  
  if [ "$FILE" ]; then
    { cd "$(realpath "$FILE")" || { echo "Could not open $FILE"; exit 1; } }
  fi

  getdir

  filter_data

  if [ "$MOST_USED" ]; then
    FILE=$(echo "$FILTERED" | awk -F';' '{print $5}' | sort | uniq -c | sort -rn | head -n 1 | awk '{print $2}')
  else 
    LAST_USED=$(echo "$FILTERED" | tail -n 1 | awk -F ';' '{print $5}')
    FILE="$LAST_USED"
  fi
  
  open_file 
}

open_file() {
  
  if [ -z "$FILE" ]; then
    echo ERROR: Could not find file with the specified criteria.
    exit 1
  fi
  
  open_editor "$FILE"

  log_mole_rc

}


#------code section--------------------------------------------------------------------

if [ -z "$(which realpath)" ]; then
  echo "Error: command realpath not found"
  exit 1
fi


if [ -z "$MOLE_RC" ]; then
  echo "Error: MOLE_RC is not set"
  exit 1
fi

if [ ! -f "$MOLE_RC" ]; then
  mkdir -p "$(dirname "$MOLE_RC")"
  touch "$MOLE_RC"
fi

#DATE=$(date +%Y-%m-%d)
DATETIME=$(date +%Y-%m-%d_%H-%M-%S)


if [ "$1" = "list" ]; then
  LIST="TRUE"
  shift
fi

if [ "$1" = "secret-log" ]; then
  SECRETLOG="TRUE"
  shift
fi


#reset OPTIND
OPTIND=1
# parse arguments
while getopts ":hg:ma:b:" option; do
  case "$option" in
  h)      print_help; exit 1;;
  g)      GROUP=$OPTARG;;
  m)      MOST_USED="TRUE";;
  a)      DATE_AFTER=$OPTARG;; #YYYY-MM-DD format
  b)      DATE_BEFORE=$OPTARG;; #YYYY-MM-DD format
  :)      echo "Error: -$OPTARG requires an argument"; exit 1;;
  *)      echo "Invalid option: -$OPTARG" >&2
          echo "Try 'mole -h' for more information."
          exit 1;;
  esac
done

shift $((OPTIND-1))


if [ "$LIST" ]; then
  if [ $# -ne 0 ]; then
    DIR=$1
  else 
    getdir
  fi
  list
  exit 0
fi

if [ "$SECRETLOG" ]; then
  if [ $# -ne 0 ]; then
    DIRECTORIES=$1
  fi
  secret_log
  exit 0
fi

  
if [ $# -ne 0 ]; then
  FILE=$1
  shift
  if [ -d "$FILE" ]; then 
    change_dir
  else
    open_file "$GROUP" "$FILE"
  fi
else
  change_dir
fi

exit 0